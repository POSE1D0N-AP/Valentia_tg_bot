""" Altair8 HUB Interface telegram bot ver 0.1.5
"""

# Import
from pymongo import MongoClient

import logging

from telegram import Bot
from telegram import Update
from telegram import ReplyKeyboardMarkup
from telegram import KeyboardButton
from telegram import ReplyKeyboardRemove
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import Filters
from telegram.ext import CallbackContext

TG_TOKEN = " "
MONGODB_LINK = " "
MONGO_DB = "HUB"

# -------------------------------
# Bot Logic
# -------------------------------
# Connect to DataBase
mondb = MongoClient(MONGODB_LINK)[MONGO_DB]

# Login Keyboard
contact_keyboard = KeyboardButton('–í–æ–π—Ç–∏', request_contact=True)
custom_keyboard_login = [[contact_keyboard]]
REPLY_KEYBOARD_MARKUP = ReplyKeyboardMarkup(custom_keyboard_login, resize_keyboard=True)

CALLBACK_MM = "cb_mm"
CALLBACK_MM_HUB = "cb_mm_hs"
CALLBACK_MM_CHATS = "cb_mm_ch"
CALLBACK_MM_SCHLED = "cb_mm_sch"
CALLBACK_MM_TASKS = "cb_mm_ts"
CALLBACK_MM_TODO = "cb_mm_todo"
CALLBACK_MM_MUSIC = "cb_mm_mus"
CALLBACK_MM_SETTING = "cb_mm_setng"

CALLBACK_SM_ADDH = "cb_sm_add_new_hub"
CALLBACK_SM_RMH = "cb_sm_remove_my_hub"
CALLBACK_SM_NOTIFICATION = "cb_sm_notification"

CALLBACK_ADDHM_DEV = "cb_1add_hub_menu_1"
CALLBACK_ADDHM_HARD = "cb_1add_hub_menu_2"
CALLBACK_ADDHM_SOC = "cb_1add_hub_menu_3"
CALLBACK_ADDHM_ART = "cb_1add_hub_menu_4"
CALLBACK_ADDHM_GEEK = "cb_1add_hub_menu_5"

CALLBACK_RMHM_DEV = "cb_0rm_hub_menu_1"
CALLBACK_RMHM_HARD = "cb_0rm_hub_menu_2"
CALLBACK_RMHM_SOC = "cb_0rm_hub_menu_3"
CALLBACK_RMHM_ART = "cb_0rm_hub_menu_4"
CALLBACK_RMHM_GEEK = "cb_0rm_hub_menu_5"

CALLBACK_RR = "cb_rr"


def get_hubs(bool_list):
    keyboard = []
    if int(bool_list[1]):
        keyboard.append([InlineKeyboardButton("üñ•    DEV.HUB", url="https://t.me/joinchat/OPPf1lTKYcszVxfih0m2jw")])
    if int(bool_list[5]):
        keyboard.append([InlineKeyboardButton("üéÆ   GEEK.HUB", url="https://t.me/joinchat/OPPf1lDF0qoKXq7Wnn71eA")])
    if int(bool_list[3]):
        keyboard.append([InlineKeyboardButton("üó£    SOC.HUB", url="https://t.me/joinchat/OPPf1laFJhzZ6Sx88P0YOQ")])
    if int(bool_list[4]):
        keyboard.append([InlineKeyboardButton("üî≥    ART.HUB", url="https://t.me/joinchat/OPPf1leFxg4vdBbkler_Xg")])
    if int(bool_list[6]):
        keyboard.append([InlineKeyboardButton("üè¥‚Äç‚ò†   DARK.HUBÔ∏è", url="https://t.me/joinchat/OPPf1ldtdd0CxeejqWUDdg")])
    if int(bool_list[2]):
        keyboard.append([InlineKeyboardButton("üîå   HARD.HUB", url="https://t.me/joinchat/OPPf1lh2GTulebNiu34jEw")])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è     –ù–∞–∑–∞–¥Ô∏è", callback_data=CALLBACK_MM)])
    return InlineKeyboardMarkup(keyboard)


def get_back_mm():
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è     –ù–∞–∑–∞–¥Ô∏è", callback_data=CALLBACK_MM)]]
    return InlineKeyboardMarkup(keyboard)


# Main Menu
def get_main_menu(user):
    keyboard = [
        [
            InlineKeyboardButton("üü©  [HUB] chanel", url="https://t.me/thehub_su"),
        ],
        [
            InlineKeyboardButton("üï∏  My Small HUBs", callback_data=CALLBACK_MM_HUB),
        ],
        [
            InlineKeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=CALLBACK_MM_SCHLED),
            InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data=CALLBACK_MM_TASKS),
        ],
        [
            InlineKeyboardButton("üåê  –ú–æ–∏ –ß–∞—Ç—ã", callback_data=CALLBACK_MM_CHATS),
            InlineKeyboardButton("üìù  TO DO", callback_data=CALLBACK_MM_TODO),
        ],
        [
            InlineKeyboardButton("üéµ  –ú—É–∑—ã–∫–∞ –î–Ω—è", callback_data=CALLBACK_MM_MUSIC),
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æÔ∏è", callback_data=CALLBACK_MM_SETTING),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_settings(user):
    user_notify = "üîà –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if user.get("user_notification") else "üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"
    keyboard = [
        [
            InlineKeyboardButton("‚ûï  –î–æ–±–∞–≤–∏—Ç—å –•–∞–±", callback_data=CALLBACK_SM_ADDH),
            InlineKeyboardButton("‚ùå  –£–¥–∞–ª–∏—Ç—å –•–∞–±", callback_data=CALLBACK_SM_RMH),
        ],
        [
            InlineKeyboardButton("{}".format(user_notify), callback_data=CALLBACK_SM_NOTIFICATION),
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è     –ù–∞–∑–∞–¥Ô∏è", callback_data=CALLBACK_MM),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_add_hubs(bool_list):
    keyboard = []
    if int(bool_list[1]) == 0:
        keyboard.append([InlineKeyboardButton("üñ•    DEV.HUB", callback_data=CALLBACK_ADDHM_DEV)])
    if int(bool_list[2]) == 0:
        keyboard.append([InlineKeyboardButton("üîå   HARD.HUB", callback_data=CALLBACK_ADDHM_HARD)])
    if int(bool_list[3]) == 0:
        keyboard.append([InlineKeyboardButton("üó£    SOC.HUB", callback_data=CALLBACK_ADDHM_SOC)])
    if int(bool_list[4]) == 0:
        keyboard.append([InlineKeyboardButton("üî≥    ART.HUB", callback_data=CALLBACK_ADDHM_ART)])
    if int(bool_list[5]) == 0:
        keyboard.append([InlineKeyboardButton("üéÆ   GEEK.HUB", callback_data=CALLBACK_ADDHM_GEEK)])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è     –ù–∞–∑–∞–¥Ô∏è", callback_data=CALLBACK_MM_SETTING)])
    return InlineKeyboardMarkup(keyboard)


def get_remove_hubs(bool_list):
    keyboard = []
    if int(bool_list[1]):
        keyboard.append([InlineKeyboardButton("üñ•    DEV.HUB", callback_data=CALLBACK_RMHM_DEV)])
    if int(bool_list[2]):
        keyboard.append([InlineKeyboardButton("üîå   HARD.HUB", callback_data=CALLBACK_RMHM_HARD)])
    if int(bool_list[3]):
        keyboard.append([InlineKeyboardButton("üó£    SOC.HUB", callback_data=CALLBACK_RMHM_SOC)])
    if int(bool_list[4]):
        keyboard.append([InlineKeyboardButton("üî≥    ART.HUB", callback_data=CALLBACK_RMHM_ART)])
    if int(bool_list[5]):
        keyboard.append([InlineKeyboardButton("üéÆ   GEEK.HUB", callback_data=CALLBACK_RMHM_GEEK)])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è     –ù–∞–∑–∞–¥Ô∏è", callback_data=CALLBACK_MM_SETTING)])
    return InlineKeyboardMarkup(keyboard)


def get_rereg_button():
    keyboard = [
        [
            InlineKeyboardButton("üì≤  –°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data=CALLBACK_RR),
        ],
        [
            InlineKeyboardButton("–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://t.me/HUBsup"),
        ],
        [
            InlineKeyboardButton("üî• –ù–∞—à —Å–∞–π—Ç! ", url="https://www.thehub.su")
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


def on_start(update: Update, context: CallbackContext):
    message = update.message
    user = mondb.users.find_one({"user_id": message.chat.id})
    logging.info(message.chat.id)
    if not user:
        message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—É –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è!',
            reply_markup=REPLY_KEYBOARD_MARKUP
        )
    else:
        message.reply_text(
            "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é: ",
            reply_markup=get_main_menu()
        )


# IF user message == contact
def on_contact(update: Update, context: CallbackContext):
    message = update.message
    user_phone_number = 0
    user_chat_id = 0
    # IF user get another Contact
    if message.chat_id == int(message.contact['user_id']):
        if message.contact:
            num1 = str(message.contact['phone_number'])
            user_phone_number = 0

            for i in range(-10, 0):
                user_phone_number += int(num1[i]) * (10 ** ((i + 1) * -1))
            user_chat_id += int(message.contact['user_id'])

        user = login_user(mondb, user_chat_id, user_phone_number)
        logging.info(user)
        if not user:

            mondb.ValentineEvent_users.insert(
                {user_id: user_chat_id,
                  user_phone: user_phone_number, }
            )


            """message.reply_text(
                '–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                reply_markup=ReplyKeyboardRemove()
            )
            message.reply_text(
                '–í–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ–±–ª–µ–º—ã: \
                \n1. –ï—Å–ª–∏ –≤ –ê–Ω–∫–µ—Ç–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. \
                \n2. –ï—Å–ª–∏ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É –±–æ–ª–µ–µ —á–µ–º 1 –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\
                \n3. –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É, —Å–∞–º–æ–µ –≤—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–µ—Ä–µ–π–¥—è –Ω–∞ –Ω–∞—à —Å–∞–π—Ç!',
                reply_markup=get_rereg_button()
            )
            """
        else:
            message.reply_text(
                '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!',
                reply_markup=ReplyKeyboardRemove()
            )
            message.reply_text(
                '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç Altair8 - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å H.U.B. ver 0.1. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –≤–∞–º –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è!\
                 \n–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:',
                reply_markup=get_main_menu()
            )
    else:
        message.reply_text(
            '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞! –£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç UserID.',
            reply_markup=ReplyKeyboardRemove()
        )


# User Register
def login_user(mondb, user_id, user_phone_number):
    user = mondb.users.find_one({"user_phone": user_phone_number})
    logging.info("user_phone: " + str(user_phone_number))
    if user != None and user.get('user_id') is None:
        mondb.users.update_one(
            {'_id': user['_id']},
            {'$set': {'user_id': user_id}}
        )
        return user
    else:
        return None


# Command to edit phone number from DB
def do_changephone(update: Update, context: CallbackContext):
    # IF incorrect command input
    try:
        # Parcing user input
        old_phone_number = int(update.message.text[13:23])
        user_new_phone_number = int(update.message.text[26:36])
        user_name = update.message.text[37:]
        user = mondb.users.find_one({"user_phone": old_phone_number})
    except:
        user = None
        user_name = ''
        user_new_phone_number = 0

    if not user:
        update.message.reply_text(
            '–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!',
        )
    elif user.get('user_id') is None and user.get("user_name") == user_name:
        mondb.users.update_one(
            {'_id': user['_id']},
            {'$set': {'user_phone': user_new_phone_number,
                      'user_id': update.message.chat_id
                      }}
        )
        update.message.reply_text(
            '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start',
        )
    else:
        update.message.reply_text(
            '–û—à–∏–±–∫–∞! –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö!',
        )


def do_sendmessage(update: Update, context: CallbackContext):
    lead_message = update.message.text
    user = mondb.users.find_one({"user_id": update.message.chat_id})
    user_lead = int(user.get("user_hubs") / 1000000)
    if user_lead == 1:
        update.message.reply_text(
            '–¢–æ–ª—å–∫–æ –õ–∏–¥ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â—É—é –∑–∞–¥–∞—á—É!',
        )
    else:
        # Slot choice
        # TODO inline mode
        if len(lead_message) > 11:
            if lead_message[10] == '0':
                for x in mondb.users.find({"lead": True}):
                    if not (x.get("user_id") is None):
                        if str(x.get("user_hubs"))[0] == lead_message[12]:
                            context.bot.send_message(
                                chat_id=x.get("user_id"),
                                text=lead_message[11:],
                            )
            if lead_message[10] == '1':
                for x in mondb.users.find({"lead": True}):
                    if not (x.get("user_id") is None):
                        context.bot.send_message(
                            chat_id=x.get("user_id"),
                            text=lead_message[11:],
                        )
            if lead_message[10] == '2':
                for x in mondb.users.find():
                    if not (x.get("user_id") is None):
                        if str(x.get("user_hubs"))[user_lead - 1] == '1':
                            context.bot.send_message(
                                chat_id=x.get("user_id"),
                                text=lead_message[11:],
                            )
            if lead_message[10] == '3':
                for x in mondb.users.find():
                    if not (x.get("user_id") is None):
                        context.bot.send_message(
                            chat_id=x.get("user_id"),
                            text=lead_message[11:],
                        )
            else:
                update.message.reply_text(
                    '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è!',
                )
        else:
            update.message.reply_text(
                '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!',
            )


# Sticker Time! Dont Touch!
#
def handle_docs_audio(update: Update, context: CallbackContext):
#     # –ü–æ–ª—É—á–∏–º ID –°—Ç–∏–∫–µ—Ä–∞
     sticker_id = update.message.sticker.file_id
     chatid = update.effective_message.chat_id
     context.bot.send_message(
        chat_id=chatid,
        text="Sticker ID " + sticker_id,
     )



# Command to event new day to small HUB Schledule

def do_addevent(update: Update, context: CallbackContext):
    text = update.message.text
    user = mondb.users.find_one({"user_id": update.message.chat_id})
    user_lead = int(user.get("user_hubs") / 1000000)
    if user_lead == 1:
        update.message.reply_text(
            '–¢–æ–ª—å–∫–æ –õ–∏–¥ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!',
        )
    else:
        # Slot choice
        # TODO Edit this command, automatic slot choice
        if text[10] == '1':
            mondb.allschledule.update_one(
                {'hub_id': user_lead - 1},
                {'$set': {'event1': text[12:]}}
            )
        if text[10] == '2':
            mondb.allschledule.update_one(
                {'hub_id': user_lead - 1},
                {'$set': {'event2': text[12:]}}
            )
        if text[10] == '3':
            mondb.allschledule.update_one(
                {'hub_id': user_lead - 1},
                {'$set': {'event3': text[12:]}}
            )


# Telegram inline menu buttons handler
def keyboard_call_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    user = mondb.users.find_one({"user_id": update.effective_message.chat_id})

    if data == CALLBACK_MM:
        query.edit_message_text(
            text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é: ",
            reply_markup=get_main_menu()
        )
    elif data == CALLBACK_MM_HUB:
        query.edit_message_text(
            text="–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –•–∞–±—ã: ",
            reply_markup=get_hubs(str(user.get("user_hubs")))
        )
        # TODO Inline music add
    elif data == CALLBACK_MM_MUSIC:
        chatid = update.effective_message.chat_id
        query.edit_message_text(
            text="–ú—É–∑—ã–∫–∞ –¥–Ω—è, –¥–ª—è –¥—É—à–∏ –∏ —Ä–∞–±–æ—Ç—ã –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –•–∞–±–∞. –°–µ–≥–æ–¥–Ω—è –≤ —á–µ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –º—É–∑—ã–∫–∞ –æ—Ç @MON0makh\
         \n–ó–∞–∫–∞–∑–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –º–æ–∂–Ω–æ —É @MON0makh üéß",
        )
        # TODO Local audio need
        context.bot.send_sticker(chatid, 'CAACAgEAAxkBAAIDMV92U2Sk4DVLErXtBFPWgQhfmqh1AAJhAAPArAgjT8wG8ZJFRc0bBA')
        for i in range(1, 7):
            context.bot.send_audio(
                chat_id=chatid,
                audio='https://raw.githubusercontent.com/POSE1D0N-AP/Altair8tb/master/music%20of%20day/{}.mp3'.format(
                    i),
            )
        context.bot.send_message(
            chat_id=chatid,
            text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_main_menu(),
        )
    elif data == CALLBACK_MM_SCHLED:
        chatid = update.effective_message.chat_id
        # TODO add BIGHUB Schledule
        for i in range(1, 7):
            if str(user.get("user_hubs"))[i]:
                table = mondb.allschledule.find_one({"hub_id": i})
                if table != None:
                    text = table.get('hub_name') + ": "
                    if table.get('event1') != None:
                        text += "\n" + table.get('event1')
                    if table.get('event2') != None:
                        text += "\n" + table.get('event2')
                    if table.get('event3') != None:
                        text += "\n" + table.get('event3')

                    # IF schledule empty
                    if len(text) > 10:
                        context.bot.send_message(
                            chat_id=chatid,
                            text="{}".format(text),
                        )
                    else:
                        context.bot.send_message(
                            chat_id=chatid,
                            text="{}".format(text + "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ..."),
                        )

    elif data == CALLBACK_MM_SETTING:
        query.edit_message_text(
            text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_settings(user)
        )
    elif data == CALLBACK_MM_TASKS:
        query.edit_message_text(
            text="Altair8 –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Å–∫–æ—Ä–æ –º—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–∏–º.\
            \n–ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –∫–∞–∫–∏–µ –ª–∏–±–æ –±–∞–≥–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã Altair8, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º: @HUBsup",
            reply_markup=get_back_mm()
        )
    elif data == CALLBACK_MM_TODO:
        query.edit_message_text(
            text="Altair8 –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Å–∫–æ—Ä–æ –º—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–∏–º.\
            \n–ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –∫–∞–∫–∏–µ –ª–∏–±–æ –±–∞–≥–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã Altair8, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º: @HUBsup",
            reply_markup=get_back_mm()
        )
    elif data == CALLBACK_MM_CHATS:
        query.edit_message_text(
            text="Altair8 –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Å–∫–æ—Ä–æ –º—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–∏–º.\
            \n–ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –∫–∞–∫–∏–µ –ª–∏–±–æ –±–∞–≥–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã Altair8, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º: @HUBsup",
            reply_markup=get_back_mm()
        )
    elif data == CALLBACK_RR:
        query.edit_message_text(
            text="–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∞–Ω–∫–µ—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:\
            \n–í–≤–µ–¥–∏—Ç–µ /editphone <—Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞> <–Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞> <–∏–º—è-—Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –≤ –∞–Ω–∫–µ—Ç–µ>. –ü—Ä–∏–º–µ—Ä:\
            \n/editphone +7XXXXXXXXXX +7YYYYYYYYYY –í–ª–∞–¥–∏–º–∏—Ä –ú–æ–Ω–æ–º–∞—Ö\
            \n–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ù–æ–º–µ—Ä –≤–∞–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ —Å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."
        )
    elif data == CALLBACK_SM_ADDH:
        query.edit_message_text(
            text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –Ω–æ–≤—ã–µ –•–∞–±—ã.\
            \n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã–π –•–∞–± –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤ –û—Å–Ω–æ–≤–Ω–æ–º –ú–µ–Ω—é",
            reply_markup=get_add_hubs(str(user.get("user_hubs")))
        )
    elif data == CALLBACK_SM_RMH:
        query.edit_message_text(
            text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –•–∞–±—ã.\
            \n–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –•–∞–± –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –û—Å–Ω–æ–≤–Ω–æ–º –ú–µ–Ω—é. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
            reply_markup=get_remove_hubs(str(user.get("user_hubs")))
        )
    elif data == CALLBACK_ADDHM_DEV or data == CALLBACK_ADDHM_HARD or \
            data == CALLBACK_ADDHM_SOC or data == CALLBACK_ADDHM_ART or \
            data == CALLBACK_ADDHM_GEEK or data == CALLBACK_RMHM_DEV or \
            data == CALLBACK_RMHM_HARD or data == CALLBACK_RMHM_SOC or \
            data == CALLBACK_RMHM_ART or data == CALLBACK_RMHM_GEEK:
        logging.warning(data)
        user_hubs = str(user.get("user_hubs"))
        user_now_edit_hub = int(data[-1])
        user_hubs = user_hubs[0:user_now_edit_hub] + data[3] + user_hubs[(user_now_edit_hub + 1):]
        user["user_hubs"] = user_hubs
        mondb.users.update_one(
            {'_id': user['_id']},
            {'$set': {'user_hubs': int(user_hubs)}}
        )

        if int(data[3]) == 0:
            query.edit_message_text(
                text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –•–∞–±—ã.\
                        \n–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –•–∞–± –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –û—Å–Ω–æ–≤–Ω–æ–º –ú–µ–Ω—é. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
                reply_markup=get_remove_hubs(str(user.get("user_hubs")))
            )
        else:
            query.edit_message_text(
                text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –Ω–æ–≤—ã–µ –•–∞–±—ã.\
                               \n–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã–π –•–∞–± –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –≤ –û—Å–Ω–æ–≤–Ω–æ–º –ú–µ–Ω—é",
                reply_markup=get_add_hubs(str(user.get("user_hubs")))
            )
    elif data == CALLBACK_SM_NOTIFICATION:
        mondb.users.update_one(
            {'_id': user['_id']},
            {'$set': {'user_notification': not user['user_notification']}}
        )
        user['user_notification'] = not user['user_notification']

        query.edit_message_text(
            text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_settings(user)
        )


def main():
    updater = Updater(
        token=TG_TOKEN,
        use_context=True,
    )

    logging.info("Altair8 started")
    # Commands handler add, IF you u need add new command use it
    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', on_start))
    dp.add_handler(CommandHandler('editphone', do_changephone))
    dp.add_handler(CommandHandler('addevent', do_addevent))
    dp.add_handler(CommandHandler('sendtask', do_sendmessage))
    dp.add_handler(MessageHandler(Filters.sticker, handle_docs_audio))

    dp.add_handler(CallbackQueryHandler(callback=keyboard_call_handler, pass_chat_data=True))
    dp.add_handler(MessageHandler(Filters.contact, on_contact))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
